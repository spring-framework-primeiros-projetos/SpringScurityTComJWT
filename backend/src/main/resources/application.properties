# ===============================
#  Tokem de segurança
# ===============================
  
    security.oauth2.client.scope=password
    security.oauth2.client.client-id=lOINqy*jRZTB28lIg#&oBDS$mRRlRr8o%!1NVsFukO02Fl&dDo
    security.oauth2.client.client-secret=vOytj$Y*ZuTT^C8%V1Bdu5^6ES&bhJBxQ04nNlHfFQPzdlbO8b
    security.oauth2.resource.jwt.key-value=giNeTHeNEUteRGlAXAvYWAtIVErmOnIANtuRyLEMAcAStErtib

    application.jwt.secretKey=bldJP6r4QAZqn7HRfExd5diPJ9SfVN4RcAUjG6W469eh1wRiK0hN7NYOyFl1S8XkVS0Ov1JtiAtEl9nWXA41rRlPJc9aaX3f5ILlHxfGIFG1xM0AdTVs9HtcC1cYjApo7aTOMTArHzC6k69QGq0nsm
    application.jwt.tokenPrefix=Bearer 
    application.jwt.tokenExpirationAfterDays=10

# ===============================
#  SSL
# ===============================

#    server.ssl.enabled = true
#    server.ssl.key-store =src/main/resources/bootsecurity.p12
#    server.ssl.key-store-password = 4x&ZN@PbZNZQ
#    server.ssl.keyStoreType = PKCS12
#    server.ssl.keyAlias =bootsecurity

# ===============================
#  API Google
# ===============================

    application.google.outputFormat = json
    application.google.apiKey = AIzaSyDb6e-Zpm6F-1m9vffW1tyBzrriYejz_yE
    application.google.language = pt-BR
    application.google.units = metric 
    application.google.mode = driving



# ===============================
#   LOCAL DATA SOURCE
# ===============================

    spring.jpa.database=POSTGRESQL
    spring.datasource.platform=postgres
    spring.datasource.url=jdbc:postgresql://localhost:5432/mudar
    spring.datasource.username=postgres
    spring.datasource.password= root
    spring.jpa.hibernate.ddl-auto = update
    spring.jpa.generate-ddl=true
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
    spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================
# Processo com o banco postgree do elefant
# ===============================
#    spring.jpa.database=POSTGRESQL
#    spring.datasource.platform=postgres
#    spring.datasource.url=jdbc:postgresql://drona.db.elephantsql.com:5432/zmxzyfgh?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory
#    spring.datasource.username= zmxzyfgh
#    spring.datasource.password= cB2rnmpgk6rKbMhoVVDdE6kisJbw949r
#    spring.datasource.driver-class-name=org.postgresql.Driver
#    spring.jpa.hibernate.ddl-auto = create-drop
#    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#    spring.jpa.generate-ddl=true
#    spring.jpa.show-sql=true


#===============================
# Processo com o banco postgree do Heroku até o processo de criação for finalizado.
#===============================
 
#    spring.jpa.database=POSTGRESQL
#    spring.datasource.platform=postgres
#    spring.datasource.url=jdbc:postgresql://ec2-34-204-22-76.compute-1.amazonaws.com:5432/dahfurskc7h764?sslmode=require&user=zkdgvesgqvyfse&password=07e31d9c387df5f74d1165ca79782734a7c0918b31acf1a3cd11f825aac322a2
#    spring.datasource.username= zkdgvesgqvyfse
#    spring.datasource.password= 07e31d9c387df5f74d1165ca79782734a7c0918b31acf1a3cd11f825aac322a2
#    spring.datasource.driver-class-name=org.postgresql.Driver
#    spring.jpa.hibernate.ddl-auto = create-drop
#    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#    spring.jpa.generate-ddl=true
#    spring.jpa.show-sql=true
#    sslmode=require
